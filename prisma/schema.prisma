generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model album {
  id               Int               @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  name             String            @db.VarChar(5000)
  description      String?           @db.Text
  release_day      Int?              @db.UnsignedSmallInt
  release_month    Int?              @db.UnsignedSmallInt
  release_year     Int?              @db.UnsignedSmallInt
  last_fm_mbid     String?           @db.Char(32)
  has_last_fm_mbid Boolean?
  album_format_id  Int               @default(1) @db.UnsignedInt
  deleted          Boolean           @default(false)
  album_format     album_format      @relation(fields: [album_format_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "album_format_id")
  album_image_rel  album_image_rel[]
  track_album_rel  track_album_rel[]

  @@index([album_format_id], map: "album_album_format_id_INDEX")
}

model album_format {
  id    Int     @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  name  String  @unique(map: "name_UNIQUE") @db.VarChar(45)
  album album[]
}

model album_image {
  id              Int               @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  domain_id       Int               @db.UnsignedInt
  image_id        String            @db.Char(32)
  r               Int               @default(0) @db.UnsignedInt
  g               Int               @default(0) @db.UnsignedInt
  b               Int               @default(0) @db.UnsignedInt
  deleted         Boolean           @default(false)
  domain          domain            @relation(fields: [domain_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "album_image_domain_id")
  album_image_rel album_image_rel[]

  @@index([domain_id], map: "domain_id_INDEX")
}

model album_image_rel {
  image_id    Int         @db.UnsignedInt
  album_id    Int         @db.UnsignedInt
  is_cover    Boolean     @default(true)
  album       album       @relation(fields: [album_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "album_image_rel_album_id")
  album_image album_image @relation(fields: [image_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "album_image_rel_image_id")

  @@id([image_id, album_id])
  @@index([album_id], map: "album_id_INDEX")
}

model artist {
  id                Int                @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  name              String             @db.VarChar(500)
  description       String?            @db.Text
  first_listen_date DateTime           @default(now()) @db.DateTime(0)
  last_fm_mbid      String?            @db.Char(32)
  deleted           Boolean            @default(false)
  artist_image_rel  artist_image_rel[]
  track_artist_rel  track_artist_rel[]
}

model artist_image {
  id               Int                @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  domain_id        Int                @db.UnsignedInt
  image_id         String             @db.Char(33)
  r                Int                @default(0) @db.UnsignedInt
  g                Int                @default(0) @db.UnsignedInt
  b                Int                @default(0) @db.UnsignedInt
  deleted          Boolean            @default(false)
  domain           domain             @relation(fields: [domain_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "artist_image_domain_id")
  artist_image_rel artist_image_rel[]

  @@index([domain_id], map: "domain_id_INDEX")
}

model artist_image_rel {
  image_id     Int          @db.UnsignedInt
  artist_id    Int          @db.UnsignedInt
  is_cover     Boolean      @default(true)
  artist       artist       @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "artist_image_rel_artist_id")
  artist_image artist_image @relation(fields: [image_id], references: [id], onDelete: NoAction, onUpdate: Restrict, map: "artist_image_rel_image_id")

  @@id([artist_id, image_id])
  @@index([artist_id], map: "artist_id_INDEX")
  @@index([image_id], map: "image_id_INDEX")
}

model artist_role {
  id               Int                @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  name             String             @unique(map: "name_UNIQUE") @db.VarChar(50)
  track_artist_rel track_artist_rel[]
}

model domain {
  id             Int              @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  name           String           @unique(map: "name_UNIQUE") @db.VarChar(261)
  album_image    album_image[]
  artist_image   artist_image[]
  playlist_image playlist_image[]
}

model genre {
  id              Int               @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  name            String            @unique(map: "name_UNIQUE") @db.VarChar(100)
  deleted         Boolean           @default(false)
  track_genre_rel track_genre_rel[]
}

model language {
  id                 Int                  @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  name               String               @unique(map: "name_UNIQUE") @db.VarChar(50)
  track_language_rel track_language_rel[]
}

model playlist {
  id                 Int                  @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  name               String               @db.VarChar(5000)
  description        String?              @db.Text
  deleted            Boolean              @default(false)
  playlist_image_rel playlist_image_rel[]
  track_playlist_rel track_playlist_rel[]
}

model playlist_image {
  id                 Int                  @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  domain_id          Int                  @db.UnsignedInt
  image_id           String               @db.Char(32)
  r                  Int                  @default(0)
  g                  Int                  @default(0)
  b                  Int                  @default(0)
  deleted            Boolean              @default(false)
  domain             domain               @relation(fields: [domain_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "playlist_image_domain_id")
  playlist_image_rel playlist_image_rel[]

  @@index([domain_id], map: "domain_id_idx")
}

model playlist_image_rel {
  image_id       Int            @db.UnsignedInt
  playlist_id    Int            @db.UnsignedInt
  is_cover       Boolean        @default(true)
  playlist_image playlist_image @relation(fields: [image_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "playlist_image_rel_image_id")
  playlist       playlist       @relation(fields: [playlist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "playlist_image_relt_playlist_id")

  @@id([image_id, playlist_id])
  @@index([playlist_id], map: "playlist_id_INDEX")
}

model track {
  id                   Int                  @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  name                 String?              @db.VarChar(5000)
  duration             Float?
  lyrics               String?              @db.Text
  description          String?              @db.Text
  last_fm_mbid         String?              @db.Char(32)
  youtube_video_id     String?              @db.Char(11)
  has_youtube_video_id Boolean?
  upload_date          DateTime?            @default(now()) @db.DateTime(0)
  version_id           Int                  @default(1) @db.UnsignedInt
  explicit             Boolean              @default(false)
  deleted              Boolean              @default(false)
  version              version              @relation(fields: [version_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "track_version_id")
  track_album_rel      track_album_rel[]
  track_artist_rel     track_artist_rel[]
  track_genre_rel      track_genre_rel[]
  track_language_rel   track_language_rel[]
  track_playlist_rel   track_playlist_rel[]

  @@index([version_id], map: "version_id_INDEX")
}

model track_album_rel {
  track_id       Int   @db.UnsignedInt
  album_id       Int   @db.UnsignedInt
  track_position Int   @default(1) @db.UnsignedInt
  album          album @relation(fields: [album_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "track_album_rel_album_id")
  track          track @relation(fields: [track_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "track_album_rel_track_id")

  @@id([album_id, track_id, track_position])
  @@index([track_id], map: "track_id_INDEX")
}

model track_artist_rel {
  track_id        Int         @db.UnsignedInt
  artist_id       Int         @db.UnsignedInt
  artist_role_id  Int         @default(1) @db.UnsignedInt
  artist_position Int         @default(1) @db.UnsignedInt
  artist          artist      @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "track_artist_rel_artist_id")
  artist_role     artist_role @relation(fields: [artist_role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "track_artist_rel_artist_role_id")
  track           track       @relation(fields: [track_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "track_artist_rel_track_id")

  @@id([track_id, artist_id])
  @@index([artist_id], map: "artist_id_INDEX")
  @@index([artist_role_id], map: "id_INDEX")
}

model track_genre_rel {
  track_id       Int   @db.UnsignedInt
  genre_id       Int   @db.UnsignedInt
  genre_position Int   @default(1) @db.UnsignedInt
  genre          genre @relation(fields: [genre_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "track_genre_rel_genre_id")
  track          track @relation(fields: [track_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "track_genre_rel_track_id")

  @@id([track_id, genre_id])
  @@index([genre_id], map: "genre_id_INDEX")
}

model track_language_rel {
  track_id    Int      @db.UnsignedInt
  language_id Int      @db.UnsignedInt
  language    language @relation(fields: [language_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "track_language_rel_language_id")
  track       track    @relation(fields: [track_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "track_language_rel_track_id")

  @@id([track_id, language_id])
  @@index([language_id], map: "language_id_INDEX")
}

model track_playlist_rel {
  track_id       Int      @db.UnsignedInt
  playlist_id    Int      @db.UnsignedInt
  track_position Int      @db.UnsignedInt
  playlist       playlist @relation(fields: [playlist_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "track_playlist_rel_playlist_id")
  track          track    @relation(fields: [track_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "track_playlist_rel_track_id")

  @@id([track_id, playlist_id])
  @@index([playlist_id], map: "playlist_id_INDEX")
}

model version {
  id    Int     @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  name  String  @unique(map: "content_UNIQUE") @db.VarChar(100)
  track track[]
}
